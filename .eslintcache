[{"/home/johntapsell/Documents/Workspace/todo-frontend/src/reportWebVitals.ts":"1","/home/johntapsell/Documents/Workspace/todo-frontend/src/Todo/TodoList.tsx":"2","/home/johntapsell/Documents/Workspace/todo-frontend/src/Auth/Login.tsx":"3","/home/johntapsell/Documents/Workspace/todo-frontend/src/Auth/SignUp.tsx":"4","/home/johntapsell/Documents/Workspace/todo-frontend/src/App.tsx":"5","/home/johntapsell/Documents/Workspace/todo-frontend/src/hooks/useHttpRequest.tsx":"6","/home/johntapsell/Documents/Workspace/todo-frontend/src/context/AuthContext.tsx":"7","/home/johntapsell/Documents/Workspace/todo-frontend/src/Todo/TodoItem.tsx":"8"},{"size":399,"mtime":1636676939921,"results":"9","hashOfConfig":"10"},{"size":1867,"mtime":1637142922056,"results":"11","hashOfConfig":"10"},{"size":1410,"mtime":1637120369394,"results":"12","hashOfConfig":"10"},{"size":2026,"mtime":1637120377438,"results":"13","hashOfConfig":"10"},{"size":2002,"mtime":1637141479385,"results":"14","hashOfConfig":"10"},{"size":1052,"mtime":1637113642612,"results":"15","hashOfConfig":"10"},{"size":409,"mtime":1637141497745,"results":"16","hashOfConfig":"10"},{"size":1578,"mtime":1637143719913,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"np6zyd",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/johntapsell/Documents/Workspace/todo-frontend/src/reportWebVitals.ts",[],"/home/johntapsell/Documents/Workspace/todo-frontend/src/Todo/TodoList.tsx",["35"],"/home/johntapsell/Documents/Workspace/todo-frontend/src/Auth/Login.tsx",["36"],"/home/johntapsell/Documents/Workspace/todo-frontend/src/Auth/SignUp.tsx",["37"],"import React, { FunctionComponent, useContext, useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { AuthContext } from '../context/AuthContext';\n\nexport const SignUp: FunctionComponent = () => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [loggedIn, setLoggedIn] = useState(false);\n  const { register, handleSubmit, errors } = useForm();\n  const auth = useContext(AuthContext);\n\n  const signupOnSubmit = async event => {\n    const { firstName, lastName, email, password, confirmPassword } = event;\n    try {\n      const res = await fetch('http://localhost:8080/api/users/sign-up', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          firstName,\n          lastName,\n          email,\n          password,\n          confirmPassword,\n        }),\n      });\n      const user = await res.json();\n      const { userId, token } = user;\n      auth.login(userId, token);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  return (\n    <form onSubmit={handleSubmit(signupOnSubmit)}>\n      <input type='text' ref={register({ required: true })} name='firstName' placeholder='First Name' />\n      {errors.firstName && <span>This field is required</span>}\n      <input type='text' ref={register({ required: true })} name='lastName' placeholder='Last Name' />\n      {errors.lastName && <span>This field is required</span>}\n      <input type='email' ref={register({ required: true })} name='email' placeholder='Email' />\n      {errors.email && <span>This field is required</span>}\n      <input type='password' ref={register({ required: true, min: 6 })} name='password' placeholder='Password' />\n      {errors.password && <span>This field is required</span>}\n      <input type='password' ref={register({ required: true, min: 6 })} name='confirmPassword' placeholder='Password' />\n      {errors.confirmPassword && <span>This field is required</span>}\n      <button type='submit'>Register</button>\n    </form>\n  );\n};\n","/home/johntapsell/Documents/Workspace/todo-frontend/src/App.tsx",[],"/home/johntapsell/Documents/Workspace/todo-frontend/src/hooks/useHttpRequest.tsx",["38"],"/home/johntapsell/Documents/Workspace/todo-frontend/src/context/AuthContext.tsx",[],"/home/johntapsell/Documents/Workspace/todo-frontend/src/Todo/TodoItem.tsx",[],{"ruleId":"39","severity":1,"message":"40","line":37,"column":7,"nodeType":"41","messageId":"42","endLine":37,"endColumn":18},{"ruleId":"39","severity":1,"message":"40","line":28,"column":7,"nodeType":"41","messageId":"42","endLine":28,"endColumn":18},{"ruleId":"39","severity":1,"message":"40","line":30,"column":7,"nodeType":"41","messageId":"42","endLine":30,"endColumn":18},{"ruleId":"39","severity":1,"message":"40","line":34,"column":7,"nodeType":"41","messageId":"42","endLine":34,"endColumn":18},"no-console","Unexpected console statement.","MemberExpression","unexpected"]